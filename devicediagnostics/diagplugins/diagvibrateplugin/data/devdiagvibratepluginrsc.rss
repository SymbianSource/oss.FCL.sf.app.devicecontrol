/*
* Copyright (c) 2007 Nokia Corporation and/or its subsidiary(-ies). 
* All rights reserved.
* This component and the accompanying materials are made available
* under the terms of "Eclipse Public License v1.0"
* which accompanies this distribution, and is available
* at the URL "http://www.eclipse.org/legal/epl-v10.html".
*
* Initial Contributors:
* Nokia Corporation - initial contribution.
*
* Contributors:
*
* Description:  Resource file for DiagVibratePlugin
*
*/



//  RESOURCE IDENTIFIER
NAME    VIBR // 4 letter ID

//  INCLUDES
#include    <eikon.rh>
#include    "diagvibrateplugin.hrh"
#include    <devdiagvibrateplugin.loc>
#include    <diagplugincommon.loc>

#include    <avkon.loc>
#include    <avkon.mbg>
#include    <avkon.rsg>
#include    <avkon.rh>

#include    <AvkonIcons.hrh>
#include    <bldvariant.hrh>
#include    <data_caging_paths_strings.hrh>
#include    <eikcore.rsg>
#include    <eikon.rsg>
#include    <uikon.rh>

// CONSTANTS
#define BMPFILE_NAME    "\\resource\\apps\\avkon2.mbm"

//  RESOURCE DEFINITIONS

RESOURCE RSS_SIGNATURE
    {
    }

RESOURCE TBUF
    {
    buf="VIBR";
    }

//----------------------------------------------------
//  r_diag_lst_vibrate
//
// Vibrate Plugin caption 
//----------------------------------------------------
//
RESOURCE TBUF r_diag_lst_vibrate
    {
    buf = qtn_diag_lst_vibrate;
    }

//----------------------------------------------------
//  r_diag_msg_vibrating
//
// Message text the phone is vibrating
//----------------------------------------------------
//
RESOURCE TBUF r_diag_msg_vibrating
    {
    buf = qtn_diag_msg_vibrating;
    }

//----------------------------------------------------
//  r_diag_lst_test_vibrate
//
// Vibrate text for the suite view
//----------------------------------------------------
//
RESOURCE TBUF r_diag_lst_test_vibrate
    {
    buf = qtn_diag_lst_test_vibrate;
    }

//----------------------------------------------------
//  r_diag_msg_info_vibrate
//
// Vibrate test information message
//----------------------------------------------------
//
RESOURCE TBUF r_diag_msg_info_vibrate
    {
    buf = qtn_diag_conf_test_failed_vibrate;
    }

//----------------------------------------------------
//  r_diag_title_test_vibrate
//
// Vibrate title text for suite and result views
//----------------------------------------------------
//
RESOURCE TBUF r_diag_title_test_vibrate
    {
    buf = qtn_diag_title_test_vibrate;
    }

//----------------------------------------------------
//  r_diag_msg_title_vibrate
//
// Vibrate title text for start query
//----------------------------------------------------
//
RESOURCE TBUF r_diag_msg_title_vibrate
    {
    buf = qtn_diag_msg_title_vibrate;
    }

//----------------------------------------------------
//  r_vibrate_softkeys_ok__cancel
//
// Buttons shown when the user is asked to confirm that
// the test should be executed. Shown when the test is
// run as a single test.
//----------------------------------------------------
//
RESOURCE CBA r_vibrate_softkeys_ok__cancel
    {
    buttons = 
        {
        CBA_BUTTON 
            { 
            id  = EAknSoftkeyOk; 
            txt = text_softkey_ok;
            },

        CBA_BUTTON 
            { 
            id  = ECBACmdCancel;      // .hrh 
            txt = text_softkey_cancel; // .rls or .loc
            }
        };
    }


//----------------------------------------------------
//  r_vibrate_softkeys_skip_ok_cancel
//
// Buttons shown when the user is asked to confirm 
// that the test should be executed. Shown when the 
// test is run as a part of a suite.
//----------------------------------------------------
//
RESOURCE CBA r_vibrate_softkeys_ok_skip
    {
    buttons = 
        {
         CBA_BUTTON 
            { 
            id  = EAknSoftkeyOk; 
            txt = text_softkey_ok;
            },
        CBA_BUTTON 
            { 
            id  = ECBACmdSkip;       // .hrh 
            txt = qtn_diag_softk_skip;  // .rls or .loc
            }       
        };
    }

//----------------------------------------------------
//  r_vibrate_softkeys_stop__cancel
//
// Buttons shown during the vibration. These buttons are
// shown when the test is run as a single test.
//----------------------------------------------------
//
RESOURCE CBA r_vibrate_softkeys_stop__cancel
    {
    buttons = 
        {
	    CBA_BUTTON 
	        { 
            id  = EAknSoftkeyOk; 
            txt = qtn_msk_stop;
	        },

        CBA_BUTTON 
	        { 
            id  = ECBACmdCancel;      // .hrh 
            txt = text_softkey_cancel; // .rls or .loc
	        }
        };
    }

//----------------------------------------------------
//  r_vibrate_softkeys_skip_stop__cancel
//
// Buttons shown during the vibration. Shown when the
// test is run as a part of a suite.
//----------------------------------------------------
//
RESOURCE CBA r_vibrate_softkeys_stop_cancel
    {
    buttons = 
        {
       CBA_BUTTON 
	        { 
            id  = EAknSoftkeyOk; 
            txt = qtn_msk_stop;
	        },

        CBA_BUTTON 
	        { 
            id  = ECBACmdCancel;      // .hrh 
            txt = text_softkey_cancel; // .rls or .loc
	        } 

	
        };
    }


RESOURCE CBA r_vibrate_softkeys_yes_no
    {
    buttons = 
        {
       CBA_BUTTON 
	        { 
            id  = EAknSoftkeyYes; 
            txt = text_softkey_yes;
	        },

        CBA_BUTTON 
	        { 
            id  = ECBACmdNo;      // .hrh 
            txt = text_softkey_no; // .rls or .loc
	        } 

	
        };
    }

//----------------------------------------------------
//  r_vibrateplugin_confquery_dlg
//
// Vibrate Plugin confirmation query dialog
//----------------------------------------------------
//
RESOURCE DIALOG r_vibrateplugin_confquery_dlg
    {
    flags = EGeneralQueryFlags;
    buttons = r_vibrate_softkeys_yes_no;
    items =
        {
        DLG_LINE
            {
            type = EAknCtQuery;
            id = EGeneralQuery;
            control = AVKON_CONFIRMATION_QUERY
                {
                layout = EConfirmationQueryLayout;
                label = qtn_diag_conf_vibrate;
                bmpfile = BMPFILE_NAME;
                bmpid = EMbmAvkonQgn_note_query;
                bmpmask = EMbmAvkonQgn_note_query_mask;
                };
            }
        };
    }
    
//----------------------------------------------------
//  r_vibrateplugin_disconnect_charger_dlg
//
// Vibrate Plugin discoonect charger note
//----------------------------------------------------
//
RESOURCE DIALOG r_vibrateplugin_disconnect_charger_dlg
    {
    flags = EGeneralQueryFlags;
    buttons = r_vibrate_softkeys_ok__cancel;
    items =
        {
        DLG_LINE
            {
            type = EAknCtQuery;
            id = EGeneralQuery;
            control = AVKON_CONFIRMATION_QUERY
                {
                layout = EConfirmationQueryLayout;
                label = qtn_diag_conf_battery_charger_disconnect;
                bmpfile = BMPFILE_NAME;
                bmpid = EMbmAvkonQgn_note_empty;
                bmpmask = EMbmAvkonQgn_note_empty_mask;
                };
            }
        };
    }


//----------------------------------------------------
//  r_vibrateplugin_startquery
//
// Vibrate Plugin start query dialog
//----------------------------------------------------
//
RESOURCE DIALOG r_vibrateplugin_startquery
    {
    flags   = EGeneralQueryFlags | 
              EEikDialogFlagNoBorder |
              EEikDialogFlagNoTitleBar;    
    buttons = r_vibrate_softkeys_ok_skip;
    items =
        {
        DLG_LINE
             {
             type = EAknCtPopupHeadingPane;
             id   = EAknMessageQueryHeaderId;

             control = AVKON_HEADING
                 {              
                    label = qtn_diag_msg_title_vibrate;
                    headinglayout = R_AVKON_WML_SIGN_QUERY_HEADING_PANE;
                 };
             },
    
        DLG_LINE
            {
            type = EAknCtMessageQuery;   // avkon.hrh
            id   = EAknMessageQueryContentId; // .hrh
            control = AVKON_MESSAGE_QUERY // avkon.hrh
                {
                message   = qtn_diag_msg_vibrate;          // .loc
                };
            }
        };
    }


//----------------------------------------------------
//  r_vibrateplugin_progress_note_vibrating
//
// Vibrate Plugin vibration progress note
//----------------------------------------------------
//
RESOURCE DIALOG r_vibrateplugin_progress_note_vibrating
    {
    flags   = EAknProgressNoteFlags;
    buttons = r_vibrate_softkeys_stop_cancel;

    items =
        {
        DLG_LINE
            {
            type = EAknCtNote;
            id   = EGeneralNote;

            control = AVKON_NOTE
                {
                layout         = EProgressLayout;
                singular_label = qtn_diag_msg_vibrating;
                
                imageid = EMbmAvkonQgn_note_progress;
                imagemask = EMbmAvkonQgn_note_progress_mask;
                };
            }
        };
    }
    
    
    
    //----------------------------------------------------
//  r_vibrateplugin_disconnect_charger_dlg
//
// Vibrate Plugin discoonect charger note
//----------------------------------------------------
//
RESOURCE DIALOG r_vibrateplugin_vibrate_activate_dlg
    {
    flags = EGeneralQueryFlags;
    buttons = r_vibrate_softkeys_yes_no;
    items =
        {
        DLG_LINE
            {
            type = EAknCtQuery;
            id = EGeneralQuery;
            control = AVKON_CONFIRMATION_QUERY
                {
                layout = EConfirmationQueryLayout;
                label = qtn_diag_conf_vibrate_activate;
                bmpfile = BMPFILE_NAME;
                bmpid = EMbmAvkonQgn_note_empty;
                bmpmask = EMbmAvkonQgn_note_empty_mask;
                };
            }
        };
    }

//End of File
